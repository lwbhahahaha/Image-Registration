function [  ] = genMAT( acq_dir )
%GENMAT generates MAT files for each DICOM volume image found in acq_dir
%
%   genMAT generates MAT files for each DICOM volume image found in
%   acq_dir.  This function is exclusive to generating MATs from DICOMs,
%   but could be adapted to generating MAT files from TIFFs.  This function
%   is adapted from previously written code.
%
%   INPUTS:
%
%   acq_dir                       Acquisition directory to process
%
%
%   AUTHOR:       Shant Malkasian
%   DATE CREATED: 12-May-2017
%


dcm_regexp      = '\.\d+\\$|\d';

% Set paths:
mat_dir         = [acq_dir '/MAT/'];
dcm_dir         = [acq_dir '/DICOM/'];
time_vec_path   = [acq_dir '/time_vector_autoGenerated.mat'];
data_vec        = gen_time_vector(dcm_dir);
dcm_paths       = data_vec(:,2);
time_vec        = cell2mat(data_vec(:,1));

if ~exist(mat_dir, 'dir')
    mkdir(mat_dir);
end

% Iterate over all dcm folders found in dcm_dir:
i = 1;
n = length(dcm_paths);
progressbar('Generating MATs...');
for dcm_folder  = dcm_paths'
    f_idx_str   = sprintf('%02i.mat', i);
    try
        im_stack    = double(ImportDICOMSequence(dcm_folder{1}));
    catch
        warning('ImportDICOMSequence Error: %s\n', dcm_folder{1});
        continue
    end
    mat_path    = [mat_dir f_idx_str];
    
    save(mat_path, 'im_stack');
    progressbar(i / n);
    i = i + 1;
end
save(time_vec_path, 'time_vec');


%% HELPER FUNCTIONS:
    function [index_vec] = gen_time_vector( dcm_dir )

       
       dcm_folders  = natsort(regexpdir(dcm_dir, dcm_regexp, false));
       fn           = length(dcm_folders);
       index_vec    = cell(fn, 2);
       progressbar('Generating Time Vector...');
       j = 1;
       for f = dcm_folders'
           index_vec{j,2}   = f{1};
           dcm_files        = regexpdir(f{1}, '\.dcm$', false);

           %next line new
%              if length(dcm_files) >= 1
           dcm_header       = dicominfo(dcm_files{1});
           index_vec{j,1}   = dcm_time2sec(dcm_header.ContentTime);
           %next 3 line new
%              else
%                   index_vec{j,1}   = 0;
%              end
           progressbar(j / fn);
           j = j + 1;
       end
       index_vec = sortrows(index_vec);
       min_time  = index_vec{1,1};
       for j = 1 : size(index_vec,1)
           index_vec{j, 1} = index_vec{j,1} - min_time;
       end
    end

    function tsec = dcm_time2sec( dcm_time )
       % DCM time tags are saved in the following format (typically):
       %        (hr hr min min sec sec)
       % For example:
       %        120010.00 would equate to -> hr 12 min 0 sec 10 ms 00
        hr      = str2double(dcm_time(1:2));
        min     = str2double(dcm_time(3:4));
        sec     = str2double(dcm_time(5:6));
        msec    = str2double(dcm_time(7:end));
        tsec    = hr * 60^2 + min * 60 + sec + msec; % convert everything to seconds
    end





end